version: '3'

services:
  bot:
    container_name: bot
    build:
      context: ./bot
      dockerfile: Dockerfile
    environment:
      TOKEN: ${TOKEN}
      RM_HOST: ${RM_HOST}
      RM_PORT: ${RM_PORT}
      RM_USER: ${RM_USER}
      RM_PASSWORD: ${RM_PASSWORD}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_REPL_USER: ${DB_REPL_USER}
      DB_REPL_PASSWORD: ${DB_REPL_PASSWORD}
      DB_REPL_HOST: ${DB_REPL_HOST}
      DB_REPL_PORT: ${DB_REPL_PORT}
    depends_on:
      - db
    env_file:
      - .env

  db:
    image: postgres:14
    container_name: db
    build:
      context: ./db
      dockerfile: Dockerfile
      args:
        DB_REPL_USER: ${DB_REPL_USER}
        DB_REPL_PASSWORD: ${DB_REPL_PASSWORD}
        DB_DATABASE: ${DB_DATABASE}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: |
        scram-sha-256
        host replication all 0.0.0.0/0 md5
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  db_repl:
    container_name: db_repl
    build:
      context: ./db_repl
      dockerfile: Dockerfile
      args:
        DB_REPL_USER: ${DB_REPL_USER}
        POSTGRES_PASSWORD: ${DB_PASSWORD}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      DB_REPL_USER: ${DB_REPL_USER}
      DB_REPL_PASSWORD: ${DB_REPL_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

volumes:
  db:
